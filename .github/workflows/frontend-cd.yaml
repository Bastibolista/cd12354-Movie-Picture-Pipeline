name: Frontend CD

on: 
  push:
    branches:
      - main
      
  # Automatic trigger on pull requests that are closed to the main branch
  pull_request:
    branches:
      - main
    paths:
      - 'starter/frontend/**'
  # Manual trigger using the workflow_dispatch event
  workflow_dispatch:

defaults:
  run:
    working-directory: ./starter/frontend

jobs:
    lint:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: latest

        - name: Cache dependencies
          id: cache
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
        
        - name: Install dependencies
          run: npm ci
        
        - name: Run linting
          run: npm run lint
    
    test:
        runs-on: ubuntu-latest
        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: latest

        - name: Cache dependencies
          id: cache
          uses: actions/cache@v3
          with:
            path: ~/.npm
            key: deps-node-modules-${{ hashFiles('**/package-lock.json') }}
        
        - name: Install dependencies
          run: npm ci
        
        - name: Run test
          run: CI=true npm test

    build:
        needs: [lint, test]
        runs-on: ubuntu-latest
        env:
          IMAGE_NAME: 'movie-picture'
          EKS_CLUSTER_NAME: 'cluster'

        steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Set up Node.js 
          uses: actions/setup-node@v3
          with:
            node-version: latest
        
        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v3
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v2
    
        - name: Build Docker image
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            BACKEND_URL: ${{ secrets.REACT_APP_MOVIE_API_URL }}
            ECR_REPOSITORY: frontend
          run: | 
            docker build --build-arg=REACT_APP_MOVIE_API_URL=$BACKEND_URL -t $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7} .
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
  
        - name: Install kustomize
          uses: imranismail/setup-kustomize@v2
  
        - name: Deploy to EKS
          env:
            AWS_REGION: ${{ secrets.AWS_REGION }}
          run: |
            aws eks --region $AWS_REGION update-kubeconfig --name $EKS_CLUSTER_NAME
            cd ./k8s/
            kustomize edit set image frontend=$ECR_REGISTRY/$ECR_REPOSITORY:${GITHUB_SHA::7}
            kustomize build | kubectl apply -f -